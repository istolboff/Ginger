% Сущности
% ========

% река имеет левый и правый берега
	берег(река, левый).
	берег(река, правый).

% перевозимые существа это волк, коза и капуста 
	перевозимоеCущество(волк).
	перевозимоеCущество(коза).
	перевозимоеCущество(капуста).


% Воздействия
% ===========

% Действие 'фермер перевозит перевозимое существо на другой берег' переводит из состояния 
% 'фермер и перевозимое существо находятся на одном берегу' в состояние 
% 'фермер и перевозимое существо находятся на другом берегу'.

действие(
		перевозит(фермер, Х, ОдинБерег, ДругойБерег), 
		фрагментСостояния([находится(фермер, ОдинБерег), находится(Х, ОдинБерег)]),
		фрагментСостояния([находится(фермер, ДругойБерег), находится(Х, ДругойБерег)])) :-
	перевозимоеCущество(Х),
	берег(река, ОдинБерег),
	берег(река, ДругойБерег),
	ОдинБерег \= ДругойБерег.


% Действие 'фермер переправляется на другой берег' переводит из состояния 
% 'фермер находится на одном берегу' в состояние 
% 'фермер находится на другом берегу'.

действие(
		переправляется(фермер, ОдинБерег, ДругойБерег),
		фрагментСостояния([находится(фермер, ОдинБерег)]),
		фрагментСостояния([находится(фермер, ДругойБерег)])) :-
	берег(река, ОдинБерег),
	берег(река, ДругойБерег),
	ОдинБерег \= ДругойБерег.


% Граничные условия
% =================
 
% в момент начала миссии фермер, волк, коза и капуста находятся на левом берегу реки

начальноеСостояние(
		[находится(волк, левый),
		находится(коза, левый),
		находится(капуста, левый),
		находится(фермер, левый)]).


% Правила
% =======

% если волк и коза находятся на одном берегу реки, а фермер находится на другом берегу реки,
% то миссия заканчивается неудачей с формулировкой 'волк съел козу'

конечноеСостояние(
	'волк съел козу',                          
	[находится(волк, ОдинБерег),
	находится(коза, ОдинБерег),
	находится(фермер, ДругойБерег)]) :-
      берег(река, ОдинБерег),
      берег(река, ДругойБерег),
      ОдинБерег \= ДругойБерег.    
    


% если коза и капуста находятся на одном берегу реки, а фермер находится на другом берегу реки,
% то миссия заканчивается неудачей с формулировкой 'коза съела капусту'

конечноеСостояние(
    'коза съела капусту',
	[находится(коза, ОдинБерег),
	находится(капуста, ОдинБерег),
	находится(фермер, ДругойБерег)]) :-
      берег(река, ОдинБерег),
      берег(река, ДругойБерег),
      ОдинБерег \= ДругойБерег.

% если волк, коза и капуста находятся на правом берегу реки, то миссия заканчивается успехом

конечноеСостояние(
    'миссия заканчивается успехом',
	[находится(волк, правый),
	находится(коза, правый),
	находится(капуста, правый),
	находится(фермер, правый)]).


% Стандартные предикаты для поиска путей в пространстве состояний.

выполнимо(ТекущееПолноеСостояние, Действие, ФрагментСостоянияДо, ФрагментСостоянияПосле, ПолноеСостояниеПосле) :-
    действие(Действие, фрагментСостояния(ФрагментСостоянияДо), фрагментСостояния(ФрагментСостоянияПосле)),
    subset(ФрагментСостоянияДо, ТекущееПолноеСостояние),
    subtract(ТекущееПолноеСостояние, ФрагментСостоянияДо, Y),
    union(Y, ФрагментСостоянияПосле, Z),
    sort(Z, ПолноеСостояниеПосле).

unwantedFinalState(ExpectedFinalStateName, CurrentState) :-
    конечноеСостояние(X, ConcreteFinalState),
    X \= ExpectedFinalStateName,
    subset(ConcreteFinalState, CurrentState).

solve(InitialState, FinalStateName, FinalState, Solution) :-
    sort(InitialState, SortedInitialState),
    sort(FinalState, SortedFinalState),
    breadthFirst([SortedInitialState], [], SortedFinalState, FinalStateName, Result), 
	flatten(Result, FlattenedResult),
    listFullFinalStates(FinalState, FlattenedResult, MatchingFullFinalStates),
	buildPath(SortedInitialState, MatchingFullFinalStates, FlattenedResult, ReversedPath),
    reverse(ReversedPath, Solution).

breadthFirst([], _, _, _, _) :- 
    fail.

breadthFirst([Finish | _], _, FinishSubset, _, []) :- 
    subset(FinishSubset, Finish).

breadthFirst([H | QueueAdded], QueueProcessed, Finish, FinalStateName, [ConnectingEdges, Res]) :- 
    adjacentNodes(H, FinalStateName, Adjacents),
    dictionaryRemoveKeys(Adjacents, QueueAdded, Temp1),
    dictionaryRemoveKeys(Temp1, QueueProcessed, Temp2),
    buildConnectingEdges(H, Temp2, ConnectingEdges),
    dictionaryKeys(Temp2, StatesReachableIn1Step),
    append(QueueAdded, StatesReachableIn1Step, ExtendedQueueAdded),
    breadthFirst(ExtendedQueueAdded, [H | QueueProcessed], Finish, FinalStateName, Res).

adjacentNodes(H, FinalStateName, Adjacents) :-
    findall(pair(NewState, Action), canMoveToNewState(H, FinalStateName, NewState, Action), Adjacents).

canMoveToNewState(State, FinalStateName, State1, Действие) :-
	выполнимо(State, Действие, _, _, State1),
    not(unwantedFinalState(FinalStateName, State1)).

buildConnectingEdges(_, [], []).
buildConnectingEdges(From, [pair(To, Action) | Tail], [pair(edge(From, To), Action) | Result]) :- 
    buildConnectingEdges(From, Tail, Result).

buildPath(Start, FullFinalStates, Edges, [pair(edge(Start, Finish), Action)]) :-
    member(Finish, FullFinalStates),
    member(pair(edge(Start, Finish), Action), Edges).
buildPath(Start, FullFinalStates, Edges, [pair(edge(X, Finish), Action) | Path]) :-
    member(Finish, FullFinalStates),
    member(pair(edge(X, Finish), Action), Edges),
    buildPath1(Start, X, Edges, Path).

buildPath1(Start, Finish, Edges, [pair(edge(Start, Finish), Action)]) :-
    member(pair(edge(Start, Finish), Action), Edges).
buildPath1(Start, Finish, Edges, [pair(edge(X, Finish), Action) | Path]) :-
    member(pair(edge(X, Finish), Action), Edges),
    buildPath1(Start, X, Edges, Path).

listFullFinalStates(FinalState, [pair(edge(_, Finish), _) | Edges], [Finish | Result]) :-
    subset(FinalState, Finish),
    listFullFinalStates(FinalState, Edges, Result),
    !.
listFullFinalStates(FinalState, [_ | Edges], Result) :-
    listFullFinalStates(FinalState, Edges, Result).
listFullFinalStates(_, [], []).


dictionaryKeys([pair(Key, _) | Dictionary], [Key | Keys]) :- 
    dictionaryKeys(Dictionary, Keys).
dictionaryKeys([], []).

dictionaryValues([pair(_, Value) | Dictionary], [Value | Values]) :- 
    dictionaryValues(Dictionary, Values).
dictionaryValues([], []).

dictionaryRemoveKeys([pair(Key, _) | Dictionary], Keys, Dictionary1) :- 
    member(Key, Keys), 
    dictionaryRemoveKeys(Dictionary, Keys, Dictionary1),
    !.
dictionaryRemoveKeys([X | Dictionary], Keys, [X | Dictionary1]) :- 
    dictionaryRemoveKeys(Dictionary, Keys, Dictionary1).
dictionaryRemoveKeys([], _, []).


% начальноеСостояние(InitialState)
% , FinalStateName = 'миссия заканчивается успехом'
% , конечноеСостояние(FinalStateName, FinalState)
% , solve(InitialState, FinalStateName, FinalState, Solution)
% , dictionaryValues(Solution, Route)

% начальноеСостояние(InitialState)
% , FinalStateName = 'волк съел козу'
% , конечноеСостояние(FinalStateName, FinalState)
% , solve(InitialState, FinalStateName, FinalState, Solution)
% , dictionaryValues(Solution, Route)

% начальноеСостояние(InitialState)
% , FinalStateName = 'коза съела капусту'
% , конечноеСостояние(FinalStateName, FinalState)
% , solve(InitialState, FinalStateName, FinalState, Solution)
% , dictionaryValues(Solution, Route)