% Сущности
% ========

% река имеет левый и правый берега
	берег(река, левый).
	берег(река, правый).

% перевозимые существа это волк, коза и капуста 
	перевозимоеCущество(волк).
	перевозимоеCущество(коза).
	перевозимоеCущество(капуста).


% Воздействия
% ===========

% Действие 'фермер перевозит перевозимое существо на другой берег' переводит из состояния 
% 'фермер и перевозимое существо находятся на одном берегу' в состояние 
% 'фермер и перевозимое существо находятся на другом берегу'.

действие(
		перевозит(фермер, Х, ОдинБерег, ДругойБерег), 
		фрагментСостояния([находится(фермер, ОдинБерег), находится(Х, ОдинБерег)]),
		фрагментСостояния([находится(фермер, ДругойБерег), находится(Х, ДругойБерег)])) :-
	перевозимоеCущество(Х),
	берег(река, ОдинБерег),
	берег(река, ДругойБерег),
	ОдинБерег \= ДругойБерег.


% Действие 'фермер переправляется на другой берег' переводит из состояния 
% 'фермер находится на одном берегу' в состояние 
% 'фермер находится на другом берегу'.

действие(
		переправляется(фермер, ОдинБерег, ДругойБерег),
		фрагментСостояния([находится(фермер, ОдинБерег)]),
		фрагментСостояния([находится(фермер, ДругойБерег)])) :-
	берег(река, ОдинБерег),
	берег(река, ДругойБерег),
	ОдинБерег \= ДругойБерег.


% Граничные условия
% =================
 
% в момент начала миссии фермер, волк, коза и капуста находятся на левом берегу реки

начальноеСостояние(
		[находится(волк, левый),
		находится(коза, левый),
		находится(капуста, левый),
		находится(фермер, левый)]).


% Правила
% =======

% если волк и коза находятся на одном берегу реки, а фермер находится на другом берегу реки,
% то миссия заканчивается неудачей с формулировкой 'волк съел козу'

конечноеСостояние(
	'волк съел козу',                          
	[находится(волк, ОдинБерег),
	находится(коза, ОдинБерег),
	находится(фермер, ДругойБерег)]) :-
      берег(река, ОдинБерег),
      берег(река, ДругойБерег),
      ОдинБерег \= ДругойБерег.    
    


% если коза и капуста находятся на одном берегу реки, а фермер находится на другом берегу реки,
% то миссия заканчивается неудачей с формулировкой 'коза съела капусту'

конечноеСостояние(
    'коза съела капусту',
	[находится(коза, ОдинБерег),
	находится(капуста, ОдинБерег),
	находится(фермер, ДругойБерег)]) :-
      берег(река, ОдинБерег),
      берег(река, ДругойБерег),
      ОдинБерег \= ДругойБерег.

% если волк, коза и капуста находятся на правом берегу реки, то миссия заканчивается успехом

конечноеСостояние(
    'миссия заканчивается успехом',
	[находится(волк, правый),
	находится(коза, правый),
	находится(капуста, правый),
	находится(фермер, правый)]).


% Стандартные предикаты для поиска путей в пространстве состояний.

выполнимо(ТекущееПолноеСостояние, Действие, ФрагментСостоянияДо, ФрагментСостоянияПосле, ПолноеСостояниеПосле) :-
    действие(Действие, фрагментСостояния(ФрагментСостоянияДо), фрагментСостояния(ФрагментСостоянияПосле)),
    subset(ФрагментСостоянияДо, ТекущееПолноеСостояние),
    subtract(ТекущееПолноеСостояние, ФрагментСостоянияДо, Y),
    union(Y, ФрагментСостоянияПосле, Z),
    sort(Z, ПолноеСостояниеПосле).

unwantedFinalState(ExpectedFinalStateName, CurrentState) :-
    конечноеСостояние(X, UnsortedState),
    X \= ExpectedFinalStateName,
    sort(UnsortedState, CurrentState).

solve(InitialState, FinalStateName, FinalState, Solution, Actions) :-
    sort(InitialState, SortedInitialState),
    sort(FinalState, SortedFinalState),
    depthfirst([], SortedInitialState, FinalStateName, SortedFinalState, Solution, Actions).
    
depthfirst(_, SortedInitialState, _, FinalState, [SortedInitialState], []) :-
    subset(FinalState, SortedInitialState).

depthfirst(Path, State, FinalStateName, FinalState, [State | Solution1], [Действие | AllActions]) :-
    выполнимо(State, Действие, _, _, State1),
    not(unwantedFinalState(FinalStateName, State1)),
    not(member(State1, Path)),
    depthfirst([State | Path], State1, FinalStateName, FinalState, Solution1, AllActions).


% начальноеСостояние(InitialState)
% , FinalStateName = 'волк съел козу'
% , конечноеСостояние(FinalStateName, FinalState)
% , solve(InitialState, FinalStateName, FinalState, _, Actions)

% начальноеСостояние(InitialState)
% , FinalStateName = 'коза съела капусту'
% , конечноеСостояние(FinalStateName, FinalState)
% , solve(InitialState, FinalStateName, FinalState, _, Actions)